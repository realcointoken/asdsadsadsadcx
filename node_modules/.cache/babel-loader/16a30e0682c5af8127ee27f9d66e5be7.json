{"ast":null,"code":"/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param {Object} [options] - Options bag.\n * @param {boolean} [options.mustBeMetaMask] - Whether to only look for MetaMask\n * providers. Default: false\n * @param {boolean} [options.silent] - Whether to silence console errors. Does\n * not affect thrown errors. Default: false\n * @param {number} [options.timeout] - Milliseconds to wait for\n * 'ethereum#initialized' to be dispatched. Default: 3000\n * @returns {Promise<EthereumProvider | null>} A Promise that resolves with the\n * Provider if it is detected within the given timeout, otherwise null.\n */\nmodule.exports = function detectEthereumProvider({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000\n} = {}) {\n  _validateInputs();\n\n  let handled = false;\n  return new Promise(resolve => {\n    if (window.ethereum) {\n      handleEthereum();\n    } else {\n      window.addEventListener('ethereum#initialized', handleEthereum, {\n        once: true\n      });\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n      if (handled) {\n        return;\n      }\n\n      handled = true;\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum);\n      } else {\n        const message = mustBeMetaMask && ethereum ? 'Non-MetaMask window.ethereum detected.' : 'Unable to detect window.ethereum.';\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/nanoissuperior/ChainBridge/node_modules/@metamask/detect-provider/index.js"],"names":["module","exports","detectEthereumProvider","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","window","ethereum","handleEthereum","addEventListener","once","setTimeout","removeEventListener","isMetaMask","message","console","error","Error"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBAA,MAAM,CAACC,OAAP,GAAiB,SAASC,sBAAT,CAAiC;AAChDC,EAAAA,cAAc,GAAG,KAD+B;AAEhDC,EAAAA,MAAM,GAAG,KAFuC;AAGhDC,EAAAA,OAAO,GAAG;AAHsC,IAI9C,EAJa,EAIT;AAENC,EAAAA,eAAe;;AAEf,MAAIC,OAAO,GAAG,KAAd;AAEA,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B,QAAIC,MAAM,CAACC,QAAX,EAAqB;AAEnBC,MAAAA,cAAc;AAEf,KAJD,MAIO;AAELF,MAAAA,MAAM,CAACG,gBAAP,CACE,sBADF,EAEED,cAFF,EAGE;AAAEE,QAAAA,IAAI,EAAE;AAAR,OAHF;AAMAC,MAAAA,UAAU,CAAC,MAAM;AACfH,QAAAA,cAAc;AACf,OAFS,EAEPP,OAFO,CAAV;AAGD;;AAED,aAASO,cAAT,GAA2B;AAEzB,UAAIL,OAAJ,EAAa;AACX;AACD;;AACDA,MAAAA,OAAO,GAAG,IAAV;AAEAG,MAAAA,MAAM,CAACM,mBAAP,CAA2B,sBAA3B,EAAmDJ,cAAnD;AAEA,YAAM;AAAED,QAAAA;AAAF,UAAeD,MAArB;;AAEA,UAAIC,QAAQ,KAAK,CAACR,cAAD,IAAmBQ,QAAQ,CAACM,UAAjC,CAAZ,EAA0D;AACxDR,QAAAA,OAAO,CAACE,QAAD,CAAP;AACD,OAFD,MAEO;AAEL,cAAMO,OAAO,GAAGf,cAAc,IAAIQ,QAAlB,GACZ,wCADY,GAEZ,mCAFJ;AAIA,SAACP,MAAD,IAAWe,OAAO,CAACC,KAAR,CAAc,4BAAd,EAA4CF,OAA5C,CAAX;AACAT,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF;AACF,GAzCM,CAAP;;AA2CA,WAASH,eAAT,GAA4B;AAC1B,QAAI,OAAOH,cAAP,KAA0B,SAA9B,EAAyC;AACvC,YAAM,IAAIkB,KAAJ,CAAW,8EAAX,CAAN;AACD;;AACD,QAAI,OAAOjB,MAAP,KAAkB,SAAtB,EAAiC;AAC/B,YAAM,IAAIiB,KAAJ,CAAW,sEAAX,CAAN;AACD;;AACD,QAAI,OAAOhB,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,YAAM,IAAIgB,KAAJ,CAAW,sEAAX,CAAN;AACD;AACF;AACF,CAhED","sourcesContent":["/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param {Object} [options] - Options bag.\n * @param {boolean} [options.mustBeMetaMask] - Whether to only look for MetaMask\n * providers. Default: false\n * @param {boolean} [options.silent] - Whether to silence console errors. Does\n * not affect thrown errors. Default: false\n * @param {number} [options.timeout] - Milliseconds to wait for\n * 'ethereum#initialized' to be dispatched. Default: 3000\n * @returns {Promise<EthereumProvider | null>} A Promise that resolves with the\n * Provider if it is detected within the given timeout, otherwise null.\n */\nmodule.exports = function detectEthereumProvider ({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000,\n} = {}) {\n\n  _validateInputs()\n\n  let handled = false\n\n  return new Promise((resolve) => {\n    if (window.ethereum) {\n\n      handleEthereum()\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      )\n\n      setTimeout(() => {\n        handleEthereum()\n      }, timeout)\n    }\n\n    function handleEthereum () {\n\n      if (handled) {\n        return\n      }\n      handled = true\n\n      window.removeEventListener('ethereum#initialized', handleEthereum)\n\n      const { ethereum } = window\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum)\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.'\n\n        !silent && console.error('@metamask/detect-provider:', message)\n        resolve(null)\n      }\n    }\n  })\n\n  function _validateInputs () {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`)\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`)\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}