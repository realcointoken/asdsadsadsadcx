{"ast":null,"code":"var _jsxFileName = \"/Users/nanoissuperior/ChainBridge/src/App.js\";\nimport React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./components/Header.js\";\nimport PoolStats from \"./components/Poolstats.js\";\nimport EstimatedPoolPrize from \"./components/EstimatedPoolPrize.js\";\nimport Poolbutton from \"./components/Poolbutton.js\";\nimport Web3 from \"web3\";\nimport ConnectWallet from \"./components/Connectwallet.js\";\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const fundingScreen = false;\n  const ethereum = window.ethereum;\n  const [addr, setAddr] = useState(\"\");\n\n  async function getAccount() {\n    const accounts = await ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    const account = accounts[0];\n    setAddr(account);\n  }\n\n  async function sendTransaction() {\n    const ethereum = window.ethereum;\n    const params = [{\n      from: addr,\n      to: \"null\",\n      gas: \"null\",\n      // 30400\n      gasPrice: \"0x9184e72a000\",\n      // 10000000000000\n      value: \"0x9184e72a\",\n      // 2441406250\n      data: \"null\"\n    }];\n    ethereum.request({\n      method: \"eth_sendTransaction\",\n      params\n    }).then(result => {// The result varies by by RPC method.\n      // For example, this method will return a transaction hash hexadecimal string on success.\n    }).catch(error => {// If the request fails, the Promise will reject with an error.\n    });\n  }\n\n  if (fundingScreen === true) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"body\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, \"Goal 5,000 Nano\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, \"To help bring ChainBridge to life, we need your support.\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"meter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        width: \"50%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      id: \"joinpool\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, \"Fund\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      id: \"joinpool\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, \"View the interface\"))));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(ConnectWallet, {\n      getAccount: () => getAccount(),\n      addr: addr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"body\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \"Use this as a bridge for moving Nano to and from ethereum in the form of WNANO.\"), /*#__PURE__*/React.createElement(PoolStats, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    })));\n  }\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nanoissuperior/ChainBridge/src/App.js"],"names":["React","useState","Header","PoolStats","EstimatedPoolPrize","Poolbutton","Web3","ConnectWallet","web3","givenProvider","App","fundingScreen","ethereum","window","addr","setAddr","getAccount","accounts","request","method","account","sendTransaction","params","from","to","gas","gasPrice","value","data","then","result","catch","error","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./components/Header.js\";\nimport PoolStats from \"./components/Poolstats.js\";\nimport EstimatedPoolPrize from \"./components/EstimatedPoolPrize.js\";\nimport Poolbutton from \"./components/Poolbutton.js\";\nimport Web3 from \"web3\";\nimport ConnectWallet from \"./components/Connectwallet.js\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const fundingScreen = false;\n  const ethereum = window.ethereum;\n\n  const [addr, setAddr] = useState(\"\");\n\n  async function getAccount() {\n    const accounts = await ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n    const account = accounts[0];\n    setAddr(account);\n  }\n  async function sendTransaction() {\n    const ethereum = window.ethereum;\n    const params = [\n      {\n        from: addr,\n        to: \"null\",\n        gas: \"null\", // 30400\n        gasPrice: \"0x9184e72a000\", // 10000000000000\n        value: \"0x9184e72a\", // 2441406250\n        data: \"null\",\n      },\n    ];\n    ethereum\n      .request({\n        method: \"eth_sendTransaction\",\n        params,\n      })\n      .then((result) => {\n        // The result varies by by RPC method.\n        // For example, this method will return a transaction hash hexadecimal string on success.\n      })\n      .catch((error) => {\n        // If the request fails, the Promise will reject with an error.\n      });\n  }\n  if (fundingScreen === true) {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Header />\n        </header>\n        <body>\n          <h1>Goal 5,000 Nano</h1>\n          <p>To help bring ChainBridge to life, we need your support.</p>\n\n          <div className=\"container6\">\n            <div className=\"meter\">\n              <span style={{ width: \"50%\" }}></span>\n            </div>\n          </div>\n          <div className=\"container\">\n            <a id=\"joinpool\">Fund</a>\n          </div>\n          <div className=\"container\">\n            <a id=\"joinpool\">View the interface</a>\n          </div>\n        </body>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Header />\n        </header>\n        <ConnectWallet getAccount={() => getAccount()} addr={addr} />\n        <body>\n          <p>\n            Use this as a bridge for moving Nano to and from ethereum in the\n            form of WNANO.\n          </p>\n          <PoolStats />\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}